WHITESPACE = _{ " " | "\r\n" | "\n" | "\t" }

line_comment = _{ "#" ~ (!NEWLINE ~ ANY)* }
block_comment = _{ "###" ~ (!"###" ~ ANY)* ~ "###" }
COMMENT = _{ block_comment | line_comment }

integer = @{ ASCII_DIGIT ~ (ASCII_DIGIT | ("_" ~ (ASCII_DIGIT)))* }

hex_int = @{ "0x" ~ (ASCII_HEX_DIGIT ~ (ASCII_HEX_DIGIT | ("_" ~ (ASCII_HEX_DIGIT)))*) }

byte = @{ "0b" ~ (ASCII_BIN_DIGIT ~ (ASCII_BIN_DIGIT | ("_" ~ (ASCII_BIN_DIGIT)))*) }
float = @{ (integer ~ "." ~ integer) | (integer ~ ("f" | "F")) }
bigint = @{ "B" ~ (hex_int | integer) }

number = { bigint | hex_int | byte | float | integer }

unary_minus = { "-" }
not = { "!" }
typeof = ${ "typeof" ~ WHITESPACE }

primitive = _{ number | string }

allow_bin_op = _{ function | list | nil | primitive | ident }

math_primary = _{ allow_bin_op | "(" ~ math_expr ~ ")" }

optional_unwrap = ${ "get" ~ WHITESPACE }
optional_or = ${ "or" ~ WHITESPACE ~ value }

math_prefix = _{ unary_minus | not | optional_unwrap | typeof }
math_postfix = _{ dot_chain | callable | list_index | optional_or }

math_atom = _{ math_prefix? ~ math_primary ~ math_postfix? }
math_expr = !{ math_atom ~ (bin_op ~ math_atom)* }

bin_op = _{ 
    op_assign | 
    add | 
    subtract | 
    multiply | 
    divide | 
    modulo | 
    bitwise_ls | 
    bitwise_rs |
    lte | 
    gte | 
    lt | 
    gt | 
    eq | 
    neq | 
    and | 
    or | 
    xor | 
    unwrap | 
    binary_xor | 
    binary_and | 
    binary_or | 
    is
}

add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
modulo = { "%" }
binary_xor = ${ "xor" ~ WHITESPACE }
binary_and = { "&" }
binary_or = { "|" }
bitwise_ls = { "<<" }
bitwise_rs = { ">>" }

op_assign = _{ add_assign | sub_assign | mul_assign | div_assign | mod_assign }

add_assign = { "+=" }
sub_assign = { "-=" }
mul_assign = { "*=" }
div_assign = { "/=" }
mod_assign = { "%=" }

lt = { "<" }
gt = { ">" }
lte = { "<=" }
gte = { ">=" }
eq = { "==" }
neq = { "!=" }

and = { "&&" }
or = { "||" }
xor = { "^" }

unwrap = { "?=" }

is = ${ "is" ~ WHITESPACE }

escape_character = _{ "\\" | "r" | "n" }
escape_sequence = @{ "\\" ~ escape_character }

string = @{ "\"" ~ (("\\\"") | (!("\"") ~ ANY))* ~ "\"" }


ident_chars = _{ ASCII_ALPHANUMERIC | "_" }

nil = @{ "nil" }
ident = ${ !ASCII_DIGIT ~ ident_chars+ }
optional_modifier = { "?" }
type = { (function_type | list_type_open_only | list_type | ident) ~ optional_modifier? }
ident_type = _{ ident ~ ":" ~ type }

function_arguments = { (value ~ ("," ~ value)*)? }
callable = { "(" ~ function_arguments ~ ")" }

block = { "{" ~ declaration* ~ "}" }

function_parameters = { ((ident ~ (":" ~ type)?))? ~ ("," ~ ((ident ~ (":" ~ type)?)))* }

function_type = { "fn" ~ "(" ~ (type ~ ("," ~ type)*)? ~ ")" ~ function_return_type?  }
// allow braces around the return type in case it is long
function_return_type = { "->" ~ (type | ("(" ~ type ~ ")")) }
function = !{ "fn" ~ "(" ~ (function_parameters) ~ ")" ~ function_return_type? ~ block }

list = !{ "[" ~ value? ~ ("," ~ value)* ~ ","? ~ "]" }
open_ended_type = { type ~ "..." }
list_type = { "[" ~ type? ~ ("," ~ (type ~ !("...")))* ~ ("," ~ open_ended_type)? ~ "]" }
list_type_open_only = { "[" ~ open_ended_type ~ "]" }
list_index = { ("[" ~ value ~ "]")+ }

value = ${ math_expr | function | ident | list }

assignment_flag = { "modify" | "const" | "export" }
assignment_flags = { assignment_flag ~ assignment_flag* }
assignment_no_type = { ident ~ "=" ~ value }
assignment_type = { ident ~ ":" ~ type ~ "=" ~ value }
assignment_unpack = { "[" ~ (ident ~ ("," ~ ident)*) ~ ","? ~ "]" ~ "=" ~ value }

assignment_variant = _{ assignment_no_type | assignment_type | assignment_unpack }
assignment = { (assignment_flags ~ assignment_variant) | assignment_variant }

reassignment_primary = _{ ident | "(" ~ reassignment_expr ~ ")" }

relative_self = { "." }
relative_parent = { ".." }

path_feature = { relative_self | relative_parent | ident }
path_sep = { "/" }
import_path = @{ path_feature ~ ("/" ~ path_feature)* ~ ".ms"? }

import_standard = { "import" ~ import_path }

import_name = { ident }
import_type = { "type" ~ WHITESPACE* ~ type }
import_name_variant = _{ import_type | import_name }

import_names = ${ "import" ~ WHITESPACE+ ~ (import_name_variant ~ (WHITESPACE* ~ "," ~ WHITESPACE* ~ import_name_variant)*) ~ WHITESPACE+ ~ "from" ~ WHITESPACE+ ~ import_path }

import = { import_names | import_standard }

dot_name_lookup = { ident }
dot_function_call = { ident ~ callable }
dot_chain_option = _{ dot_function_call | dot_name_lookup }
dot_chain = { ("." ~ dot_chain_option)+ }

reassignment_postfix = _{ list_index | dot_chain }
reassignment_expr = { reassignment_primary ~ reassignment_postfix }
reassignment = { reassignment_expr ~ "=" ~ value }

else_statement = { "else" ~ (block | if_statement) }

if_statement = { "if" ~ value ~ block ~ else_statement? }

while_loop = { "while" ~ value ~ block }

number_loop_inclusive = { "through" }
number_loop_exclusive = { "to" }

number_loop_bind_name = { "," ~ ident }

number_loop_step = { "step" ~ value }

number_loop = { "from" ~ value ~ (number_loop_inclusive | number_loop_exclusive) ~ (value) ~ (number_loop_step?) ~ (number_loop_bind_name?) ~ block }
continue_statement = { "continue" }
break_statement = { "break" }

print_statement = { "print " ~ value }
assertion = { "assert" ~ value }

return_statement = { "return " ~ value? }

class_variable = { assignment_flags? ~ ident ~ (":" ~ type)? }
class_constructor = { "constructor" ~ "(" ~ function_parameters ~ ")" ~ function_return_type? ~ block }
class_bound_function = { "fn" ~ ident ~ "(" ~ function_parameters ~ ")" ~ function_return_type? ~ block }

class_feature = _{ class_constructor | class_bound_function | class_variable }

class_body = { "{" ~ class_feature*  ~ "}" }

class_flag = { "export" }
class_flags = ${ class_flag ~ (WHITESPACE ~ class_flag)* }

class = { class_flags? ~ "class" ~ ident ~ class_body }

type_export = { "export" }
type_alias = ${ (type_export ~ WHITESPACE)? ~ "type" ~ WHITESPACE ~ ident ~ WHITESPACE ~ type }

declaration = { import | class | reassignment | assignment | type_alias | print_statement | assertion | return_statement | continue_statement | break_statement | if_statement | while_loop | number_loop | typeof | value }

file = {
    SOI ~
    (declaration | NEWLINE)* ~
    EOI
}