WHITESPACE = _{ " " | NEWLINE | "\t" }

keywords = _{
	"fn" | 
	"obj"
}


integer = @{ '0'..'9' ~ ('0'..'9' | ("_" ~ ('0'..'9')))* }

hex_digit = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
hex_int = @{ "0x" ~ (hex_digit ~ (hex_digit | ("_" ~ (hex_digit)))*) }

byte = @{ "0b" ~ ('0'..'1' ~ ('0'..'1' | ("_" ~ ('0'..'1')))*) }
float = @{ integer ~ "." ~ integer }

number = { hex_int | byte | float | integer }

ident = @{ !keywords ~ (!('0'..'9') ~ (('a'..'z') | ('0'..'9') | "_")+) }
type = _{ ident }
ident_type = _{ ident ~ ":" ~ type }

function_arguments = { (value ~ ("," ~ value)*)? }
callable = { ident ~ "(" ~ function_arguments ~ ")" }



function_parameters = { (ident_type ~ ("," ~ ident_type)*)? }
function_body = { declaration* }

// allow braces around the return type in case it is long
function_return_type = { "->" ~ (type | ("(" ~ type ~ ")")) }
function = { "fn" ~ "(" ~ function_parameters ~ ")" ~ function_return_type? ~ "{" ~ function_body ~ "}"}

value = _{ function | ident | callable | number }


assignment_no_type = { ident ~ "=" ~ value }
assignment_type = { ident ~ ":" ~ type ~ "=" ~ value }
assignment = { assignment_no_type | assignment_type }


print_statement = { "print" ~ value }

declaration = { assignment | callable | print_statement }

file = {
    SOI ~
    declaration* ~
    EOI
}